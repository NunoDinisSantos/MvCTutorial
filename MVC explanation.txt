MVC is an architectural pattern which separates an app into three main components: Model, View, and Controller. This pattern helps creating apps that are more testable and easier to update than the traditional monolihic apps. Meaning that the UI logic belongs in the View, the input logic belongs in the controller and the business logic belongs in the model. This allows us, for example, to work on the view code without depending on the business logic code.

Models:
- Classes that represent the data of the app.  
- Use validation logic to enforce business rules for data.
- Typically, model objects retrieve and store model state data in a database.

View:
- Component that displayes the app UI.
- Generally display the model data.

Controller:
- Handle browser requests.
- Retrieve model data.
- Call view templates that return a response.


Small example:
- In an MVC app, the view only displays information. The controller handles and responds to user input/interaction. The model use the values to query the database.

Passing Data from the Controller to the View:
- Controller actions are invoked in response to an incoming URL request. A controller class is where the code is written tht handles the incoming browser requests. The controller retrieves data from a data source and decides what type of response to send back to the browser. View templates can be used from a controller to generate and format an HTML response to the browser.

View templates SHOUDLD NOT:
- Do business logic.
- Interact with database directly.

A view template should work only with the data that's provided to it by the controller. Maintaning this separation of concerns helps keep the code:
- Clean
- Testable
- Maintainable


Model classes are used with EF to work with a database. EF Core is an object-relational mapping (ORM) framework that simplifies the data access code that you have to write.
The model classes created are known as POCO classes (Plain Old CLR Objects). These classes don't have any dependency on EF Core. They only define the properties of the data to be stored in the database.


